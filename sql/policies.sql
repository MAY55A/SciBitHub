-- Enable RLS first on all tables

CREATE POLICY "Enable insert for authenticated users" ON "public"."bookmarks" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete only for creator" ON "public"."bookmarks" FOR d TO 16479 USING ((( SELECT auth.uid() AS uid) = user_id));
CREATE POLICY "Enable select only for creator" ON "public"."bookmarks" FOR r TO 16479 USING ((( SELECT auth.uid() AS uid) = user_id));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."comments" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for users based on creator" ON "public"."comments" FOR d TO 0 USING (((( SELECT auth.uid() AS uid) = creator) OR (( SELECT users.role FROM users WHERE (users.id = ( SELECT auth.uid() AS uid))) = 'admin'::role)));
CREATE POLICY "Enable read access for all users" ON "public"."comments" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for comment creator" ON "public"."comments" FOR w TO 0 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."contributions" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable contributions deletion for project creators" ON "public"."contributions" FOR d TO 16479 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = ( SELECT tasks.project FROM tasks WHERE (tasks.id = contributions.task))))));
CREATE POLICY "Enable read access for all users" ON "public"."contributions" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for project creators" ON "public"."contributions" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = ( SELECT tasks.project FROM tasks WHERE (tasks.id = contributions.task))))));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."discussions" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for creators" ON "public"."discussions" FOR d TO 0 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable read access for all users" ON "public"."discussions" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for discussion creator" ON "public"."discussions" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."forum_topics" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for creators" ON "public"."forum_topics" FOR d TO 0 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable read access for all users" ON "public"."forum_topics" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for forum topic creator" ON "public"."forum_topics" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."notifications" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable users to view their notifications" ON "public"."notifications" FOR r TO 16479 USING (((( SELECT auth.uid() AS uid) = recipient_id) OR (( SELECT (('to_all_'::text || users.role) || 's'::text) FROM users WHERE (users.id = auth.uid())) = (target)::text) OR ((target)::text = 'to_all_users'::text)));
CREATE POLICY "Enable users to update their notifications read status" ON "public"."notifications" FOR w TO 16479 USING (((( SELECT auth.uid() AS uid) = recipient_id) OR (( SELECT users.role FROM users WHERE (users.id = auth.uid())) = 'admin'::role)));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."participation_requests" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for creating user (creator or request user)" ON "public"."participation_requests" FOR d TO 16479 USING (((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = participation_requests.project_id))) OR (( SELECT auth.uid() AS uid) = user_id)));
CREATE POLICY "Enable read access for all users" ON "public"."participation_requests" FOR r TO 0 USING (true);
CREATE POLICY "allow project creator and request user to update their requests" ON "public"."participation_requests" FOR w TO 16479 USING (((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = participation_requests.project_id))) OR (( SELECT auth.uid() AS uid) = user_id)));
CREATE POLICY "Enable insert for authenticated users" ON "public"."project_likes" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete only for creator" ON "public"."project_likes" FOR d TO 16479 USING ((( SELECT auth.uid() AS uid) = user_id));
CREATE POLICY "Enable select for everyone" ON "public"."project_likes" FOR r TO 0 USING (true);
CREATE POLICY "Enable insert for authenticated users only" ON "public"."projects" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for creators" ON "public"."projects" FOR d TO 0 USING ((( SELECT auth.uid() AS uid) = creator));
CREATE POLICY "Enable read access for all users" ON "public"."projects" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for project creators" ON "public"."projects" FOR w TO 0 USING ((creator = ( SELECT auth.uid() AS uid))) WITH CHECK ((creator = ( SELECT auth.uid() AS uid)));
CREATE POLICY "Enable insert for authenticated users" ON "public"."reports" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable select only for reporter" ON "public"."reports" FOR r TO 16479 USING ((( SELECT auth.uid() AS uid) = reporter));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."tasks" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for creators" ON "public"."tasks" FOR d TO 0 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = tasks.project))));
CREATE POLICY "Enable read access for all users" ON "public"."tasks" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for task creators" ON "public"."tasks" FOR w TO 0 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = tasks.project))));
CREATE POLICY "Enable insert for users only" ON "public"."users" FOR a TO 0 WITH CHECK (true);
CREATE POLICY "Enable read access for all users" ON "public"."users" FOR r TO 0 USING (true);
CREATE POLICY "Enable users to update their own data only" ON "public"."users" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = id));
CREATE POLICY "Enable insert for project creator" ON "public"."visualizations" FOR a TO 16479 WITH CHECK ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = visualizations.project))));
CREATE POLICY "Enable delete for project creator" ON "public"."visualizations" FOR d TO 16479 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = visualizations.project))));
CREATE POLICY "Enable select for public" ON "public"."visualizations" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for project creator" ON "public"."visualizations" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = ( SELECT projects.creator FROM projects WHERE (projects.id = visualizations.project))));
CREATE POLICY "Enable insert for authenticated users" ON "public"."votes" FOR a TO 16479 WITH CHECK (true);
CREATE POLICY "Enable delete for voter" ON "public"."votes" FOR d TO 16479 USING ((( SELECT auth.uid() AS uid) = voter));
CREATE POLICY "Enable select for everyone" ON "public"."votes" FOR r TO 0 USING (true);
CREATE POLICY "Enable update for voter" ON "public"."votes" FOR w TO 16479 USING ((( SELECT auth.uid() AS uid) = voter));